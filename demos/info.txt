#### MATLAB ####
# ppd_tester_code.m is used to call the Precursor_Phase_Distance.m MATLAB function for each precursor of interest, per pMap

# expected run time: between ~15 minutes and ~2 hours per pMap.
#inputs:
    pMap: the proportion map for ACCH2O, ACC, CCHH, MHC, or aragonite. Proportions range from 0 to 1 for each pixel.

    Calcium Mask: resulting mask from DifMask and X2Mask, overlapped, to separate Ca rich skeleton from epoxy in the area analyzed.

    Edge Mask: resulting mask from excluding particles and tissues outside the coral skeleton.

    Width of the pMap: the width of the pMap (same as width of the area) in pixels, which is always precisely 1030 pixels in PEEM-3 images.

    FoV: the field of view in microns of the area as collected in PEEM. Areas acquired at pH 8.05 have FoV 56 microns, areas acquired at pH 7.2 
    have FoV 45 microns.

    Depth: the distance from the edge in which proportions are collected, chosen to be 4 microns for this analysis.

#outputs:
    The output is organized as a dictionary, where each key corresponds to the distance increment and the key values are the phase proportions of all the pixels in the key. The dictionary for each pMap was exported as a .csv file, containing the collected proportions for a given phase.

Several example output .csv files are shown in the data folder, as well as example input masks and pMaps. 


#### Python ####
# demo_compare_fit.ipynb and demo_exponential.ipynb are available as jupyter notebooks
# demo_compare_fit.py and demo_exponential.py are available as python scripts
# grand_cononical_model_demo.ipynb is available is a jupyter notebook
# grand_canonical_model_demo.py is available is a python script

# expected run time:
    demo_compare_fit.py --> ~2 minutes
    demo_exponential.py --> ~4 minutes
    grand_canonical_model_demo.py --> ~2 minutes
# inputs:
    .csv files built from running MATLAB code. Examples available in the data folder.

# outputs:
    demo_compare_fit.py --> print statements specifying the best fit function and their R2 value for each .csv file
    demo_exponential.py --> plot displaying the mean precursor proportion for each .csv file, and corresponding best fits
    grand_canonical_model_demo.py --> no output, but can modify to save plot as output

